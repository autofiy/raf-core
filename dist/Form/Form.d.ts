import * as React from "react";
import IForm from "./IForm";
import FormState from "./FormState";
import FormProps, { RenderConfig } from "./FormProps";
import FieldsRenderer from "../Protocol/FieldsRenderer";
import Validator from "../Protocol/Validator";
import IField from "../Field/IField";
import CollectedData from "../Utils/CollectedData";
import AutoFormEvent from "./AutoFormEvent";
export default class Form<Props extends FormProps = FormProps, State extends FormState = FormState> extends React.Component<Props, State> implements IForm {
    private readonly formRenderer;
    private readonly fieldRenderer;
    private readonly collector;
    private readonly submitter;
    private readonly validator;
    private readonly registeredFields;
    private attachedData;
    constructor(props: Props);
    componentDidMount(): void;
    private setupAttachedData;
    getFieldsRenderer: () => FieldsRenderer;
    getValidator: () => Validator | null;
    render(): any;
    registerField: (field: IField) => void;
    getRegisteredFields: () => IField[];
    getRegisteredField: (name: string) => IField | undefined;
    startLoading: () => void;
    stopLoading: () => void;
    isLoading: () => boolean;
    getRenderConfig: () => RenderConfig;
    collect: () => CollectedData;
    isReadyToCollect: () => boolean;
    attach: (key: string, value: any) => void;
    deAttach: (key: string) => void;
    attachFile: (key: string, file: File | File[]) => void;
    deAttachFile: (key: string) => void;
    validate: () => boolean;
    submit: () => void;
    emitEvent: (event: AutoFormEvent) => void;
    private emitEventTo;
    onAnyValueChanged: (key: string, value: any, field: IField) => void;
    reset: () => void;
    clear: () => void;
    setValues: (values: any) => void;
}
