import { FieldProps } from "./FieldProps";
import FieldState from "./FieldState";
import IField from "./IField";
import { FieldMessageType } from "./FieldConfig";
import * as React from "react";
import Validator from "../Protocol/Validator";
import FieldChangeHandler from "../Protocol/FieldChangeHandler";
import IForm from "../Form/IForm";
export default class Field<Props extends FieldProps = FieldProps, State extends FieldState = FieldState> extends React.Component<Props, State> implements IField {
    protected validator?: Validator;
    protected changeHandler: FieldChangeHandler;
    constructor(props: Props);
    render(): null;
    clear(): void;
    getMessage(): undefined | string;
    getMessageType(): FieldMessageType | undefined;
    getState(): any;
    getValidationRules(): any;
    getValue(): any;
    getName(): string;
    isAsQuery(): boolean | undefined;
    isDisableOnLoading(): boolean | undefined;
    isEscapeValidation(): boolean | undefined;
    isReadonly(): boolean | undefined;
    isValid(): boolean;
    isValidateOnChange: () => boolean | undefined;
    setAsQuery(asQuery: boolean): void;
    setDisableOnLoading(disableOnLoading: boolean): void;
    setEscapeValidation(escapeValidation: boolean): void;
    setMessage(message: string | undefined): void;
    setMessageType(type: FieldMessageType | undefined): void;
    setReadonly(readonly: boolean): void;
    setValue(value: any, validateAfterChange?: boolean, afterChange?: () => void): void;
    setValidateOnChange(validateOnChange: boolean): void;
    setValidationRules(rules: any): void;
    validate(): boolean;
    error(error?: boolean): void;
    changeState(newState: any): void;
    handleChange(e: any): void;
    isFileField(): boolean;
    getForm: () => IForm;
    getListeners: () => any;
    isReadyToCollect: () => boolean;
    setReadyToCollect: (ready: boolean) => void;
    setHidden: (hidden: boolean) => void;
    isHidden: () => boolean;
    isLoading: () => boolean;
    getProps: () => Props;
    extractValueFromChangeEvent(event: any): any;
    reset: () => void;
    shouldCollect(): boolean;
    setShouldCollect: (shouldCollect: boolean) => void;
    shouldValidate: () => boolean;
    setShouldValidate: (shouldValidate: boolean) => void;
    isDisabled: () => boolean;
}
